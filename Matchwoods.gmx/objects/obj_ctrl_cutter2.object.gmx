<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>minLineLength = display_get_height()/100;
matchHeadHeight = sprite_get_height(spr_match_head_normal);
lastMouseX = noone;
lastMouseY = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button_pressed(mb_left)) {
    lastMouseX = mouse_x;
    lastMouseY = mouse_y;
}

if(scr_touch_count() == 1) {
    //if (point_direction(lastMouseX, lastMouseY, mouse_x, mouse_y) &gt;= minLineLength) {
        var colLst = scr_collision_line_list(lastMouseX, lastMouseY, mouse_x, mouse_y, obj_matchwood_cutable, false, true);
        if(colLst != noone) {
            for (var i = 0;i &lt; ds_list_size(colLst); i++) {
                var m = ds_list_find_value(colLst, i);
                var mlp1 = scr_rotate_point(m.x, m.y, m.x, m.y - m.sprite_yoffset + matchHeadHeight, m.image_angle);
                var mlp2 = scr_rotate_point(m.x, m.y, m.x, m.y + m.sprite_yoffset, m.image_angle);
                var mColPoint = scr_lines_intersect(mlp1[0], mlp1[1], mlp2[0], mlp2[1], lastMouseX, lastMouseY, mouse_x, mouse_y, false);
                if(is_array(mColPoint)) {
                    scr_matchwood_cut(m, mlp2[1]-mColPoint[1]);
                    scr_event_occurred("matchwood_cut", mouse_x, mouse_y);
                    
                    mColPoint = 0;
                }
            }
            colLst = noone;
        }
        
        lastMouseX = mouse_x;
        lastMouseY = mouse_y;
    //}
}

if(mouse_check_button_released(mb_left)) {
    lastMouseX = noone;
    lastMouseY = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
