<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_arrow_wood</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_friend</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// matchwood = noone; *** is defined in inheriated objects

//matchwood.phy_active = false;
matchwood.x = x;
matchwood.y = y;
matchwood.image_angle = (image_angle - 90);
//matchwood.phy_rotation = -matchwood.image_angle;

stretchMinLen = matchwood.sprite_height/5;
stretchMaxLen = matchwood.sprite_height/3;
stretchLen = 0;
dragX = noone;
dragY = noone;

lastMouseX = x;
lastMouseY = y;

alarm[10] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>matchwood.phy_active = false;
matchwood.phy_rotation = -matchwood.image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(mouse_check_button_pressed(mb_left)){
    if (point_distance(x, y, mouse_x, mouse_y) &lt; sprite_width) {
        dragX = mouse_x;
        dragY = mouse_y;
        
        scr_event_occurred("arrow_stretch", x, y);
    }
}

if(dragX != noone &amp;&amp; dragY != noone &amp;&amp; (lastMouseX != mouse_x || lastMouseY != mouse_y)) {
    var dragAng = point_direction(dragX, dragY, mouse_x, mouse_y);
    var from = image_angle + 45;
    var to = image_angle - 45;
    if(scr_angle_is_between(dragAng, from, to)) {
        stretchLen = clamp(stretchLen+1, stretchMinLen, stretchMaxLen);
        
        var mxy = scr_rotate_point(x, y, x - stretchLen, y, image_angle);
        matchwood.phy_position_x = mxy[0];
        matchwood.phy_position_y = mxy[1];
    }
    
    lastMouseX = mouse_x;
    lastMouseY = mouse_y;
}

if (mouse_check_button_released(mb_left) &amp;&amp; (dragX != noone &amp;&amp; dragY != noone)) {

    //phy_active = false;
    with(matchwood){
        phy_active = true;
        physics_apply_impulse(x, y, lengthdir_x(other.stretchLen*1.6, image_angle+90)*0.7, lengthdir_y(other.stretchLen*1.6, image_angle+90)*0.7);
    }
    //alarm[11] = 5;
    
    stretchLen = 0;
    dragX = noone;
    dragY = noone;
    matchwood = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

var lxy = scr_rotate_point(x, y, x - sprite_width/2, y - sprite_height/2, image_angle);
var l2xy = scr_rotate_point(x, y, x - sprite_width/2, y + sprite_height/2, image_angle);
if(matchwood != noone) {
    var exy = scr_rotate_point(matchwood.x, matchwood.y, matchwood.x - matchwood.sprite_height/2, matchwood.y, image_angle);
    draw_line_width_color(exy[0], exy[1], lxy[0], lxy[1], 1, c_black, c_black);
    
    draw_line_width_color(exy[0], exy[1], l2xy[0], l2xy[1], 1, c_black, c_black);
} else{
    draw_line_width_color(lxy[0], lxy[1], l2xy[0], l2xy[1], 1, c_black, c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>44,0</point>
    <point>44,208</point>
    <point>0,208</point>
  </PhysicsShapePoints>
</object>
